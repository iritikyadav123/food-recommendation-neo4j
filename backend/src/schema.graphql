type Restaurant 
  @node 
  @query(aggregate: false) 
{
  id: ID!
    @cypher(
      statement: """
      MATCH (this) RETURN id(this) AS n
      """,
      columnName: "n"
    )
  name: String

  inRegion: Zipcode! @relationship(type: "IS_FROM", direction: OUT)
  resOrder: [Order!]! @relationship(type: "HAS_ORDER", direction: OUT)
  resItem: [Item!]! @relationship(type: "HAVE", direction: OUT)
}

type User 
  @node 
  @query(aggregate: false) 
{
  id: ID!
    @cypher(
      statement: """
      MATCH (this) RETURN id(this) AS n
      """,
      columnName: "n"
    )
  name: String
  email: String
  age: Int
  gender: String

  livesIN: Zipcode! @relationship(type: "LIVES_IN", direction:OUT)
  orderDel: [Order!]! @relationship(type: "ORDERED_BY", direction: IN)
}

type State 
  @node 
  @query(aggregate: false) 
{
  name: String!
    @cypher(
      statement: """
      MATCH (this) RETURN this.name AS n
      """,
      columnName: "n"
    )
  cities: [City!]! @relationship(type: "IS_IN", direction: IN) 
}

type City 
  @node 
  @query(aggregate: false) 

{
  name: String!
  hasZipcodes: [Zipcode!]! @relationship(type: "LIES_IN", direction: IN)
}

type Zipcode 
  @node 
  @query(aggregate: false) 
{
  zipcode: String!
    @cypher(
      statement: """
      MATCH (this) RETURN this.zipcode AS n
      """,
      columnName: "n"
    )
  
  hasCity: City! @relationship(type: "LIES_IN", direction: OUT)
  hasRes: [Restaurant!]! @relationship(type: "IS_FROM", direction: IN)
}

type Category 
  @node 
  @query(aggregate: false) 
{
  name: String!
    @cypher(
      statement: """
      MATCH (this) RETURN this.name AS n
      """,
      columnName: "n"
    )
  hasItem: [Item!]! @relationship(type: "HAS_ITEM", direction: OUT)
}

type Item 
  @node 
  @query(aggregate: false) 
{
  id: ID!
    @cypher(
      statement: """
      MATCH (this) RETURN id(this) AS n
      """,
      columnName: "n"
    )
  name: String
  price: Float

  itemCategory: [Category!]! @relationship(type: "HAS_ITEM", direction: IN)  
  itemBelongTo: Restaurant! @relationship(type: "HAVE", direction: IN)
  likeReview: [Order!]! @relationship(type: "LIKED", direction: IN)
  dislikeReview: [Order!]! @relationship(type: "DISLIKED", direction: IN)
  containedBy: [Order!]! @relationship(type: "INCLUDE", direction: IN) 
}

type Order 
  @node 
  @query(aggregate: false) 
{
  id: ID!
    @cypher(
      statement: """
      MATCH (this) RETURN id(this) AS n
      """,
      columnName: "n"
    )
  pay_mode: String
  total_price: Float
  rating: Int

  orderBy: Restaurant! @relationship(type: "HAS_ORDER", direction: IN)
  likeItem: [Item!]! @relationship(type: "LIKED", direction: OUT)
  disLikeItem: [Item!]! @relationship(type: "DISLIKED", direction: OUT)
  totalItem: [Item!]! @relationship(type: "INCLUDE", direction: OUT)
}
type SalesReport {
  restaurant: String
  Jan_sales: Float
  Feb_sales: Float
  Mar_sales: Float
  Apr_sales: Float
  May_sales: Float
  Jun_sales: Float
  Jul_sales: Float
  Aug_sales: Float
  Sep_sales: Float
  Oct_sales: Float
  Nov_sales: Float
  Dec_sales: Float
  Yearly_sales: Float
}
type DislikedItemReport {
  restaurant_id: ID
  restaurant_name: String
  item_name: String
  disliked_count: Int
  total_count: Int
  dislike_ratio: Float
  interpretation: String
}
type LikedItemReport {
  restaurant_id: ID
  restaurant_name: String
  item_name: String
  liked_count: Int
  total_count: Int
  like_ratio: Float
  interpretation: String
}
type TopSellingReport {
  Restaurant: String
  January: String
  February: String
  March: String
  April: String
  May: String
  June: String
  July: String
  August: String
  September: String
  October: String
  November: String
  December: String
}
type SuggestedItem {
  item_name: String
  itemCategory: String
  likedTotal: Int
  orderCount: Int
}
type RecommendedRestaurant {
  resname: String
  res_id: ID
  category: String
  itemCount: Int
  likes: Int
}

type Category {
  category: String
}
type Restaurant {
  name: String
  restaurantId: String
}
type Item {
  name: String
}

union SearchResult = Category | Restaurant | Item 

type popularItem {
  likedTotal: Int
  item_name: String
  orderCount: Int
} 

type restaurantItem {
  item_id: String
  item_name: String
  number_of_order: Int
  order_item: Int
  liked_item: Int
  disliked_item: Int
  liked_percentage: Float
  price: Float


}
type NearPopularRestaurant {
   res_id: String
   res_name: String 
   orders: Int
   ratin: Int
   avg_rait: Float 
   top_categories2: [String]
} 

type restaurantListOfItem {
    item_price: Float
    zip: String
    restaurant_name: String 
    total_quantity: Int 
    total_orders:  Int 
    liked_item: Int
    like_percentage: Float
    score: Int
}

type searchResult1 {
  itemName: String
  itemLabel: String
  itemId: String 
}

type CategoryRecommendation {
  name: String
  score: Int
  type: String
}

type ItemStats {
  itemName: String
  soldQuantity: Int
  totalOrders: Int
  likedCount: Int
  likedRating: Float
}
type restaurantMetrixProps {
  restaurantName: String
  prevAmount: Float
  currentAmount: Float
  currentOrder: Int
  prevOrder: Int
  currentAvgOrder: Float
  prevAvgOrder: Float
  satisfiedCustomer: Float
  lastMonthsatisfiedCustomer: Float
  revenueChangePercent: Float
  orderChangePercent: Float
  avgOrderValueChangePercent: Float
  satifycoutomerSenrio: Float
}
type DailyRevenue {
  dayName: String
  orderDate: Date
  dailyRevenue: Float
  percentageOfWeek: Float
}

type CategorySales {
  Category: String
  CategoryRevenue: Float
  SalesPercentage: Float
}

type ItemSalesComparison {
  Item: String
  AprilSales: Float
  MarchSales: Float
  PercentChange: Float
}



type MonthlyRevenue {
  Year: Int
  Month: Int
  MonthYear: String
  MonthlyRevenue: Float
  RevenuePercentage: Float
}


type Query {


  getRestaurant(id: ID): [Restaurant]
    @cypher(
      statement: """
      MATCH (restaurant:Restaurant {id: $id}) RETURN restaurant
      """,
      columnName: "restaurant"
    )
  
  getUser(id: ID): [User]
    @cypher(
      statement: """
      MATCH (user:User {id: $id}) RETURN user
      """,
      columnName: "user"
    )
  
  getOrder(id: ID): [Order]
    @cypher(
      statement: """
      MATCH (order:Order {id: $id}) RETURN order
      """,
      columnName: "order"
    )
  
  getState(name: String): [State]
    @cypher(
      statement: """
      MATCH (state:State {name: $name}) RETURN state
      """,
      columnName: "state"
    )
  
  getZipcode(zipcode: String): [Zipcode]
    @cypher(
      statement: """
      MATCH (zipcode:Zipcode {zipcode: $zipcode}) RETURN zipcode
      """,
      columnName: "zipcode"
    )
  
  getCategory(name: String): [Category]
    @cypher(
      statement: """
      MATCH (category:Category {name: $name}) RETURN category
      """,
      columnName: "category"
    )
  
  getItem(id: ID): [Item]
    @cypher(
      statement: """
      MATCH (item:Item {id: $id}) RETURN item
      """,
      columnName: "item"
    )
  getRestaurantsByZipcode(zipcode: String!): [Restaurant]
    @cypher(
      statement: """
      MATCH (r:Restaurant)-[:IS_FROM]->(z:Zipcode {zipcode: $zipcode})
      RETURN r {.*, inRegion: z}
      """,
      columnName: "r"
    )
  getMonthlySalesByRestaurant(year: Int!): [SalesReport]
    @cypher(
      statement: """
      MATCH (r:Restaurant)-[:HAS_ORDER]->(o:Order)
      WHERE toInteger(SPLIT(toString(o.date), "-")[0]) = $year
      WITH r.name AS restaurant, toFloat(o.total_price) AS total_price, toInteger(SPLIT(toString(o.date), "-")[1]) AS month
      
      WITH 
        restaurant, 
        COLLECT({month: month, total_price: total_price}) AS monthly_sales

      RETURN {
        restaurant: restaurant,
        Jan_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 1 THEN entry.total_price ELSE 0 END),
        Feb_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 2 THEN entry.total_price ELSE 0 END),
        Mar_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 3 THEN entry.total_price ELSE 0 END),
        Apr_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 4 THEN entry.total_price ELSE 0 END),
        May_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 5 THEN entry.total_price ELSE 0 END),
        Jun_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 6 THEN entry.total_price ELSE 0 END),
        Jul_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 7 THEN entry.total_price ELSE 0 END),
        Aug_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 8 THEN entry.total_price ELSE 0 END),
        Sep_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 9 THEN entry.total_price ELSE 0 END),
        Oct_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 10 THEN entry.total_price ELSE 0 END),
        Nov_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 11 THEN entry.total_price ELSE 0 END),
        Dec_sales: REDUCE(s = 0, entry IN monthly_sales | s + CASE WHEN entry.month = 12 THEN entry.total_price ELSE 0 END),
        Yearly_sales: REDUCE(s = 0, entry IN monthly_sales | s + entry.total_price)
      } AS SalesReport
      ORDER BY SalesReport.Yearly_sales DESC
      """,
      columnName: "SalesReport"
    )
  getMostDislikedItems: [DislikedItemReport]
    @cypher(
      statement: """
      MATCH (r:Restaurant)-[:HAS_ORDER]->(o:Order)-[d:DISLIKED]->(i:Item)<-[in:INCLUDES]-()
      WITH 
          r.id AS restaurant_id, 
          r.name AS restaurant_name, 
          i.name AS item_name, 
          count(DISTINCT d) AS disliked_count, 
          count(DISTINCT in) AS total_count,
          toFloat(count(DISTINCT d)) / toFloat(count(DISTINCT in)) AS dislike_ratio 
      ORDER BY dislike_ratio DESC 
      LIMIT 20
      RETURN {
          restaurant_id: restaurant_id,
          restaurant_name: restaurant_name,
          item_name: item_name,
          disliked_count: disliked_count,
          total_count: total_count,
          dislike_ratio: dislike_ratio,
          interpretation: 
            CASE 
                WHEN dislike_ratio = 1.0 THEN "Everyone disliked it"
                WHEN dislike_ratio >= 0.8 THEN "4 in 5 disliked it"
                WHEN dislike_ratio >= 0.66 THEN "2 in 3 disliked it"
                WHEN dislike_ratio >= 0.50 THEN "1 in 2 disliked it"
                WHEN dislike_ratio >= 0.40 THEN "2 in 5 disliked it"
                WHEN dislike_ratio >= 0.33 THEN "1 in 3 disliked it"
                WHEN dislike_ratio >= 0.25 THEN "1 in 4 disliked it"
                ELSE "Less than 1 in 4 disliked it"
            END
      } AS DislikedItemReport
      ORDER BY DislikedItemReport.dislike_ratio DESC
      """,
      columnName: "DislikedItemReport"
    )
  getMostLikedItems: [LikedItemReport]
    @cypher(
      statement: """
      MATCH (r:Restaurant)-[:HAS_ORDER]->(o:Order)-[d:LIKED]->(i:Item)<-[in:INCLUDES]-()
      WITH 
          r.id AS restaurant_id, 
          r.name AS restaurant_name, 
          i.name AS item_name, 
          count(DISTINCT d) AS liked_count, 
          count(DISTINCT in) AS total_count,
          toFloat(count(DISTINCT d)) / toFloat(count(DISTINCT in)) AS like_ratio 
      ORDER BY like_ratio DESC 
      LIMIT 20
      RETURN {
          restaurant_id: restaurant_id,
          restaurant_name: restaurant_name,
          item_name: item_name,
          liked_count: liked_count,
          total_count: total_count,
          like_ratio: like_ratio,
          interpretation: 
            CASE 
                WHEN like_ratio = 1.0 THEN "Everyone liked it"
                WHEN like_ratio >= 0.8 THEN "4 in 5 liked it"
                WHEN like_ratio >= 0.66 THEN "2 in 3 liked it"
                WHEN like_ratio >= 0.50 THEN "1 in 2 liked it"
                WHEN like_ratio >= 0.40 THEN "2 in 5 liked it"
                WHEN like_ratio >= 0.33 THEN "1 in 3 liked it"
                WHEN like_ratio >= 0.25 THEN "1 in 4 liked it"
                ELSE "Less than 1 in 4 liked it"
            END
      } AS LikedItemReport
      ORDER BY LikedItemReport.like_ratio DESC
      """,
      columnName: "LikedItemReport"
    )
  getMonthlyTopSellingItems(year: Int!): [TopSellingReport]
    @cypher(
    statement: """
      MATCH (r:Restaurant)-[:HAS_ORDER]->(o:Order)-[:INCLUDES]->(i:Item)
      WHERE toInteger(SPLIT(toString(o.date), "-")[0]) = $year
      WITH  
        r.name AS restaurant,  
        toInteger(SPLIT(toString(o.date), "-")[1]) AS month,  
        i.name AS item,  
        COUNT(i) AS total_sold
        ORDER BY total_sold DESC  

      WITH  
        month,  
        restaurant,  
        COLLECT({item: item, total_sold: total_sold})[0] AS top_selling,
        SUM(total_sold) AS total_monthly_orders  

      WITH 
        restaurant,
        {
          Restaurant: restaurant,
          January: MAX(CASE WHEN month = 1 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          February: MAX(CASE WHEN month = 2 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          March: MAX(CASE WHEN month = 3 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          April: MAX(CASE WHEN month = 4 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          May: MAX(CASE WHEN month = 5 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          June: MAX(CASE WHEN month = 6 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          July: MAX(CASE WHEN month = 7 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          August: MAX(CASE WHEN month = 8 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          September: MAX(CASE WHEN month = 9 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          October: MAX(CASE WHEN month = 10 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          November: MAX(CASE WHEN month = 11 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END),
          December: MAX(CASE WHEN month = 12 THEN top_selling.item + " (" + toString(ROUND((top_selling.total_sold * 100.0) / total_monthly_orders, 2)) + "%)" END)
        } AS TopSellingReport
      RETURN TopSellingReport
      ORDER BY restaurant DESC
    """,
    columnName: "TopSellingReport"
    )

  getSuggestedItems(userId : String!): [SuggestedItem]
    @cypher(
      statement: """
        MATCH (u:User {userId: $userId})<-[:ORDERED_BY]-(o:Order)-[in:INCLUDES]->(it:Item)<-[:HAS_ITEM]-(ca:Category)
        WITH ca.name AS category_name, SUM(in.quantity) AS total_quantity
        ORDER BY total_quantity DESC
        LIMIT 3

        WITH collect(category_name) AS top_categories
        UNWIND top_categories AS category

        MATCH (c:Category {name: category})-[:HAS_ITEM]->(i:Item)
        OPTIONAL MATCH (i)<-[:LIKED]-(likedOrder:Order)
        OPTIONAL MATCH (i)<-[:INCLUDES]-(includedOrder:Order)

        WITH category, i.name AS recommended_item,
        COUNT(DISTINCT likedOrder) AS like_count,
        COUNT(DISTINCT includedOrder) AS order_count

        ORDER BY category, like_count DESC, order_count DESC
        WITH category, collect({recommended_item: recommended_item, like_count: like_count, order_count: order_count})[0..3] AS top_items

        UNWIND top_items AS item
        RETURN{ item_name: item.recommended_item, 
        itemCategory: category , 
        likedTotal: item.like_count, 
        orderCount: item.order_count} AS SuggestedItem

      """,
      columnName: "SuggestedItem"
    )
  getRecommendedRestaurants(userId: ID!): [RecommendedRestaurant]
    @cypher(
      statement: """
      MATCH (u:User {id: $userId})-[:LIVES_IN]->(:Zipcode)-[:LIES_IN]->(c:City)

      CALL {
          WITH u
          MATCH (u)<-[:ORDERED_BY]-(o:Order)-[in:INCLUDES]->(i:Item)<-[:HAS_ITEM]-(ca:Category)
          RETURN ca.name AS category, SUM(in.quantity) AS total_ordered
      }
      WITH u, c, collect({category: category, total: total_ordered}) AS userCategories

      UNWIND userCategories AS uc
      MATCH (r:Restaurant)-[:IS_FROM]->(:Zipcode)-[:LIES_IN]->(c)
      MATCH (r)-[:HAVE]->(i:Item)<-[:HAS_ITEM]-(cat:Category {name: uc.category})
      OPTIONAL MATCH (i)<-[li:LIKED]-()
      WITH r.name AS resname, r.id AS res_id, uc.category AS category, COUNT(i) AS itemCount, COUNT(li) AS likes

      RETURN resname, res_id, category, itemCount, likes
      LIMIT 10
      """,
      columnName: "RecommendedRestaurant"
    )

  searchByName(name: String!): [SearchResult]
   @cypher(
      statement: """
     MATCH (n)
     WHERE n.name STARTS WITH $name
     
     RETURN n
    """,
    columnName: "n"
   ) 
  getMostPopularFoodItem: [popularItem]
    @cypher (
    statement: """
      MATCH (i:Item)
      CALL {
       WITH i
       OPTIONAL MATCH (i)<-[in:INCLUDES]-(o:Order)
       RETURN i.name AS item_name, COUNT(in) AS number_of_item
      }
      CALL {
        WITH i
        OPTIONAL MATCH (i)<-[li:LIKED]-(o:Order)
        RETURN COUNT(li) AS liked, i.name AS item_name2
      } 

      with item_name, SUM(number_of_item) AS orderCount, SUM(liked) AS likedTotal
      RETURN 
       { item_name : item_name,
        orderCount: orderCount ,
        likedTotal: likedTotal} AS popularItem 
        ORDER BY popularItem.orderCount DESC
        LIMIT 15
 
        """,
      columnName: "popularItem"
   )
  getRestaurantItems(restaurantId: String!): [restaurantItem]
    @cypher(
     statement: """
      MATCH (res:Restaurant {restaurantId: $restaurantId})-[:HAVE]->(it:Item)
      MATCH (it)<-[in:INCLUDES]-(o:Order)
      WITH it, it.name AS item_name, SUM(in.quantity) AS order_item, COUNT(DISTINCT o) AS number_of_order
      MATCH (it)<-[li:LIKED]-(o:Order)
      WITH it, item_name, order_item, number_of_order, COUNT(li) AS liked_item
      MATCH (it)<-[dis:DISLIKED]-(o:Order)
      WITH it,it.itemId AS item_id, item_name, order_item, number_of_order, liked_item, COUNT(dis) AS disliked_item
      RETURN {
        item_id: item_id,
        item_name: item_name,
        number_of_order: number_of_order,
        order_item: order_item,
        liked_item: liked_item,
        disliked_item: disliked_item,
        liked_percentage: CASE 
          WHEN number_of_order = 0 THEN 0 
          ELSE round(toFloat(liked_item) / number_of_order * 100, 1)
        END,
        price: it.price
      } AS restaurantItem
      ORDER BY restaurantItem.liked_percentage DESC
    """,
    columnName: "restaurantItem"
   )
  getNearPopularRestaurant(cityName: String!): [NearPopularRestaurant]
    @cypher (
      statement: """
        MATCH (ci:City {name: $cityName})<-[:LIES_IN]-(zip:Zipcode)<-[:IS_FROM]-(res:Restaurant)
        OPTIONAL MATCH (res)-[:HAS_ORDER]->(o:Order)
        WITH res, res.name AS res_name, COUNT(o) AS orders, SUM(o.rating) AS ratin
        WHERE orders > 0  


        OPTIONAL MATCH (res)-[:HAS_ORDER]->(:Order)-[:LIKED]->(i:Item)<-[:HAS_ITEM]-(ca:Category)
        WITH res.restaurantId AS res_id, res_name, orders, ratin, ca.name AS cat_name,
        COUNT(i) AS item_count
        ORDER BY item_count DESC

        WITH res_id, res_name, orders, ratin,
        round(toFloat(ratin) / orders, 1) AS avg_rait,
        COLLECT(cat_name)[..3] AS top_categories

        RETURN {
        res_id : res_id,
        res_name :res_name, 
        orders: orders, 
        ratin: ratin, 
        avg_rait: avg_rait, 
        top_categories2: top_categories} AS NearPopularRestaurant
        ORDER BY NearPopularRestaurant.avg_rait DESC
        LIMIT 10


      """,
      columnName: "NearPopularRestaurant"
    )

  getRestaurantLisOfItem(cityName: String!, itemName: String!): [restaurantListOfItem] 
    @cypher (
      statement : """
        MATCH (ci:City {name: $cityName})<-[:LIES_IN]-(z:Zipcode)<-[:IS_FROM]-(res:Restaurant)
        WITH z.zipcode as zip, res
        MATCH (i:Item {name : $itemName})<-[:HAVE]-(res)
        WITH i , res,zip
        MATCH (i)<-[li:LIKED]-(o1:Order)
        WITH i, res, COUNT(li) AS liked_item, zip
        MATCH (i)<-[in:INCLUDES]-(o2:Order)
        WITH i.price AS item_price, res.name AS restaurant_name, 
          SUM(in.quantity) AS total_quantity, 
          COUNT(o2) AS total_orders, zip,
          liked_item,
          (toFloat(liked_item) / COUNT(o2)) * 100 AS like_percentage
        RETURN {
         item_price: item_price,
         zip: zip,
         restaurant_name: restaurant_name, 
         total_quantity: total_quantity, 
         total_orders: total_orders, 
         liked_item: liked_item,
         like_percentage: like_percentage,
         score: CASE 
           WHEN like_percentage > 90 THEN 5
           WHEN like_percentage > 70 THEN 4
           WHEN like_percentage > 55 THEN 3
           WHEN like_percentage > 40 THEN 2
           WHEN like_percentage >= 1 THEN 1
           ELSE 0
          END } AS restaurantListOfItem
        ORDER BY restaurantListOfItem.like_percentage DESC

      """,
      columnName: "restaurantListOfItem"
    )

  searchByName1(itemName: String!, cityName: String!) : [searchResult1]
    @cypher (

     statement:  """
      MATCH (n)
      WHERE n.name STARTS WITH $itemName
      WITH n, labels(n)[0] AS label
      OPTIONAL MATCH path1 = (n:Restaurant)-[:IS_FROM]->(z:Zipcode)-[:LIES_IN]->(c:City {name: $cityName})
      OPTIONAL MATCH path2 = (n:Item)<-[:HAVE]-(r:Restaurant)-[:IS_FROM]->(:Zipcode)-[:LIES_IN]->(:City {name: $cityName})
      WITH n, label, path1, path2
      WHERE 
       (label = 'Restaurant' AND path1 IS NOT NULL) OR
       (label = 'Item' AND path2 IS NOT NULL) OR
       (label = 'Category')
 
      RETURN DISTINCT {
      itemName:  n.name , 
      itemLabel: label,
      itemId:
      CASE 
        WHEN label = 'Restaurant' THEN n.restaurantId 
        ELSE null 
      END  } AS searchResult1
      """,
      columnName: "searchResult1"
    )

  recommendedCategories(userId: ID!): [CategoryRecommendation]
   @cypher(
    statement: """
    OPTIONAL MATCH (u:User {userId: $userId})<-[:ORDERED_BY]-(o:Order)-[:INCLUDES]->(i:Item)<-[:HAS_ITEM]-(c:Category)
    WITH c.name AS categoryName, COUNT(i) AS itemCount
    ORDER BY itemCount DESC
    LIMIT 9
    WITH collect(CASE WHEN categoryName IS NOT NULL THEN {name: categoryName, score: itemCount, type: 'ordered'} END) AS userCategories
    OPTIONAL MATCH (c2:Category)-[:HAS_ITEM]->(:Item)<-[:LIKED]-(:Order)
    WITH userCategories,
         c2.name AS likedCategory,
         COUNT(*) AS likeCount
    ORDER BY likeCount DESC
    LIMIT 9
    WITH userCategories,
         collect({name: likedCategory, score: likeCount, type: 'liked'}) AS likedCategories,
         size([x IN userCategories WHERE x IS NOT NULL]) AS userCategoryCount
    WITH CASE 
           WHEN userCategoryCount > 0 THEN userCategories 
           ELSE likedCategories 
         END AS finalCategories
    UNWIND finalCategories AS recommendedCategories
    RETURN recommendedCategories
    """,
    columnName: "recommendedCategories"
   )

  topRatedItemsByCategory(categoryName: String!): [ItemStats]
    @cypher(
      statement: """
      MATCH (c:Category {name: $categoryName})-[:HAS_ITEM]->(it:Item)
      OPTIONAL MATCH (it)<-[in:INCLUDES]-(o1:Order)
      WITH it.name AS item_name, SUM(in.quantity) AS sold_quantity, COUNT(o1) AS orders, it, o1
      OPTIONAL MATCH (it)<-[li:LIKED]-(o1)
      with item_name, SUM(sold_quantity) AS soldQuantity, SUM(orders) AS totalOrders, COUNT(li) AS likedCount, round(toFloat(COUNT(li)) / SUM(orders) * 100, 2) AS likedRating
      RETURN {  
        itemName : item_name,
        soldQuantity : soldQuantity ,
        totalOrders : totalOrders,
        likedCount : likedCount,
        likedRating : likedRating

        } AS ItemStats
      ORDER BY ItemStats.likedRating DESC
      """,
      columnName: "ItemStats"
    )

  restaurantMetrix(restaurantId: String!,startCurrent: String!,endCurrent: String!, startPrev: String!, endPrev: String!): [restaurantMetrixProps]
      @cypher(
        statement: """
          WITH 
            date($startCurrent) AS startCurrent, 
            date($endCurrent) AS endCurrent,
            date($startPrev) AS startPrev, 
            date($endPrev) AS endPrev

          MATCH (res:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(order:Order)
          WITH res, order, startCurrent, endCurrent, startPrev, endPrev,
            CASE 
              WHEN date(order.date) > startCurrent AND date(order.date) < endCurrent THEN "current"
              WHEN date(order.date) > startPrev AND date(order.date) < endPrev THEN "previous"
              ELSE null
            END AS period
          WHERE period IS NOT NULL

          WITH 
            res, startCurrent, endCurrent, startPrev, endPrev,
            collect(order) AS allOrders

          WITH 
            res, startCurrent, endCurrent, startPrev, endPrev,
            [o IN allOrders WHERE date(o.date) > startCurrent AND date(o.date) < endCurrent] AS currentOrders,
            [o IN allOrders WHERE date(o.date) > startPrev AND date(o.date) < endPrev] AS prevOrders,
            [o IN allOrders WHERE date(o.date) > startCurrent AND date(o.date) < endCurrent AND o.rating > 2] AS currentSatisfied,
            [o IN allOrders WHERE date(o.date) > startPrev AND date(o.date) < endPrev AND o.rating > 2] AS prevSatisfied

          WITH 
            res,
            reduce(sum = 0.0, o IN currentOrders | sum + o.total_price) AS currentAmount,
            size(currentOrders) AS currentOrder,
            reduce(sum = 0.0, o IN prevOrders | sum + o.total_price) AS prevAmount,
            size(prevOrders) AS prevOrder,
            size(currentSatisfied) AS satisfiedCount,
            size(prevSatisfied) AS prevSatisfiedCount

          WITH 
            res,
            currentAmount,
            currentOrder,
            prevAmount,
            prevOrder,
            satisfiedCount,
            prevSatisfiedCount,
            CASE WHEN currentOrder = 0 THEN 0 ELSE round(currentAmount / currentOrder, 2) END AS currentAvgOrder,
            CASE WHEN prevOrder = 0 THEN 0 ELSE round(prevAmount / prevOrder, 2) END AS prevAvgOrder

        RETURN{
          restaurantName: res.name,
          prevAmount: prevAmount,
          currentAmount: currentAmount,
          currentOrder: currentOrder,
          prevOrder: prevOrder,
          currentAvgOrder: currentAvgOrder,
          prevAvgOrder: prevAvgOrder,

          satisfiedCustomer: CASE WHEN currentOrder = 0 THEN 0 ELSE round(toFloat(satisfiedCount) / currentOrder * 100, 2) END ,
          lastMonthsatisfiedCustomer: CASE WHEN currentOrder = 0 THEN 0 ELSE round(toFloat(prevSatisfiedCount) / currentOrder * 100, 2) END,
          revenueChangePercent: CASE WHEN prevAmount = 0 THEN 0 ELSE round((currentAmount - prevAmount) / prevAmount * 100, 2) END ,
          orderChangePercent: CASE WHEN prevOrder = 0 THEN 0 ELSE round(toFloat(currentOrder - prevOrder) / prevOrder * 100, 2) END,
          avgOrderValueChangePercent: CASE WHEN prevAvgOrder = 0 THEN 0 ELSE round((currentAvgOrder - prevAvgOrder) / prevAvgOrder * 100, 2) END ,
          satifycoutomerSenrio: CASE WHEN prevSatisfiedCount = 0 THEN 0 ELSE round((toFloat(satisfiedCount - prevSatisfiedCount) / prevSatisfiedCount) * 100, 2) END
          } AS restaurantMetrixProps
        """,
        columnName: "restaurantMetrixProps"
      )

  weeklyRevenueBreakdown(
    restaurantId: ID!
    startDate: Date!
    endDate: Date!
  ): [DailyRevenue!]!
    @cypher(
      statement: """
      MATCH (r:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(o:Order)
      WHERE date(o.date) >= date($startDate) AND date(o.date) <= date($endDate)
      WITH 
        date(o.date) AS orderDate,
        CASE date(o.date).dayOfWeek
          WHEN 1 THEN 'Monday'
          WHEN 2 THEN 'Tuesday'
          WHEN 3 THEN 'Wednesday'
          WHEN 4 THEN 'Thursday'
          WHEN 5 THEN 'Friday'
          WHEN 6 THEN 'Saturday'
          WHEN 7 THEN 'Sunday'
        END AS dayName,
        sum(o.total_price) AS dailyRevenue
      WITH 
        collect({orderDate: orderDate, dayName: dayName, dailyRevenue: dailyRevenue}) AS dailyData
      WITH 
        dailyData,
        reduce(total = 0.0, d IN dailyData | total + d.dailyRevenue) AS weeklyRevenue
      UNWIND dailyData AS data
      RETURN {
        dayName: data.dayName,
        orderDate: data.orderDate,
        dailyRevenue: data.dailyRevenue,
        percentageOfWeek: round((data.dailyRevenue * 100.0) / weeklyRevenue, 2)  } AS DailyRevenue
      ORDER BY data.orderDate
      """,
      columnName : "DailyRevenue"
    )

  categorySalesBreakdown(restaurantId: ID!, year: Int!, month: Int!): [CategorySales!]!
    @cypher(
      statement: """
      MATCH (r:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(o:Order)-[:INCLUDES]->(i:Item)<-[:HAS_ITEM]-(c:Category)
      WHERE date(o.date).year = $year AND date(o.date).month = $month
      WITH c.name AS categoryName, SUM(i.price) AS categoryRevenue
      WITH collect({category: categoryName, revenue: categoryRevenue}) AS categories, SUM(categoryRevenue) AS totalRevenue
      UNWIND categories AS cat
      RETURN {
        Category: cat.category,
        CategoryRevenue: cat.revenue,
        SalesPercentage: round((cat.revenue / totalRevenue) * 100, 2)
        } AS CategorySales
      ORDER BY CategorySales.SalesPercentage DESC
      """,
      columnName: "CategorySales"
    )
  itemSalesComparison(
    restaurantId: ID!
    aprilYear: Int!
    aprilMonth: Int!
    marchYear: Int!
    marchMonth: Int!
  ): [ItemSalesComparison!]!
    @cypher(
      statement: """
      MATCH (r:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(o:Order)-[:INCLUDES]->(i:Item)
      WHERE date(o.date).year = $aprilYear AND date(o.date).month = $aprilMonth
      WITH i.name AS itemName, SUM(o.total_price) AS aprilRevenue

      OPTIONAL MATCH (r2:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(o2:Order)-[:INCLUDES]->(i2:Item)
      WHERE date(o2.date).year = $marchYear AND date(o2.date).month = $marchMonth AND i2.name = itemName
      WITH itemName, aprilRevenue, COALESCE(SUM(o2.total_price), 0) AS marchRevenue

      RETURN {
        Item: itemName,
        AprilSales: aprilRevenue,
        MarchSales: marchRevenue ,
        PercentChange: CASE 
          WHEN marchRevenue = 0 AND aprilRevenue > 0 THEN 100.0
          WHEN marchRevenue > 0 THEN round(((aprilRevenue - marchRevenue) / marchRevenue * 100.0), 2)
          ELSE 0.0
        END }  AS ItemSalesComparison
      ORDER BY ItemSalesComparison.AprilSales DESC
      """,
      columnName: "ItemSalesComparison"
    )

  

  monthlyRevenueBreakdown(
    restaurantId: ID!
    startDate: Date!
    endDate: Date!
  ): [MonthlyRevenue!]!
    @cypher(
      statement: """
      MATCH (r:Restaurant {restaurantId: $restaurantId})-[:HAS_ORDER]->(o:Order)
      WHERE date(o.date) >= date($startDate) AND date(o.date) <= date($endDate)
      WITH 
        date(o.date).year AS Year,
        date(o.date).month AS Month,
        toString(date(o.date).month) + '-' + toString(date(o.date).year) AS MonthYear,
        SUM(o.total_price) AS MonthlyRevenue
      ORDER BY Year DESC, Month DESC
      WITH collect({
        Year: Year,
        Month: Month,
        MonthYear: MonthYear,
        MonthlyRevenue: MonthlyRevenue
      }) AS monthlyData
      WITH monthlyData,
           REDUCE(total = 0.0, row IN monthlyData | total + row.MonthlyRevenue) AS TotalRevenue
      UNWIND monthlyData AS row
      RETURN {
        Year: row.Year ,
        Month: row.Month,
        MonthYear: row.MonthYear,
        MonthlyRevenue: row.MonthlyRevenue,
        RevenuePercentage: ROUND((row.MonthlyRevenue * 100.0) / TotalRevenue, 2)} AS MonthlyRevenue
      ORDER BY MonthlyRevenue.Year, MonthlyRevenue.Month
      """,
      columnName : "MonthlyRevenue"
    ) 

}
